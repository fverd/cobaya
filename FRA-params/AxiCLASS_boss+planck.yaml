likelihood:
  planck_2018_lowl.TT: null
  planck_2018_lowl.EE: null
  planck_2018_highl_plik.TTTEEE_lite_native: null
  planckpr4lensing:
    package_install:
      github_repository: carronj/planck_PR4_lensing
      min_version: 1.0.2

  pbjboss:
    python_path: pbj4cobaya/
    pbj_path: pbj-multiz/
    stop_at_error: True
    theory:
      linear: cobaya 
      scale_dependent_growth: False
      IRresum: True
      IRresum_kind: EH # options EH, DST
      do_redshift_rescaling: False
    likelihood:
      observables: ['P0', 'P2', 'P4', 'Q0']
      model: model_varied_cosmology_analytic_marg_multiz_withchi
      type: Gaussian # options: Gaussian, Hartlap, Sellentin
      cosmology: varied # options: fixed, varied
      do_analytic_marg: True
      # store_theorydict: True
    covariance:
      type: covariance # options: covariance, variance
      file: [C_024Q_ngc_z1.txt,C_024Q_sgc_z1.txt,C_024Q_ngc_z3.txt,C_024Q_sgc_z3.txt]
    which_Plin: delta_tot # options delta_tot, delta_nonu (i.e. cb)

params:
  omega_scf:
    prior:
      min: 0.0
      max: 0.04
    latex: \Omega_{a} h^2
    drop: True

  Omega_scf:
    value: 'lambda omega_scf, h: omega_scf/h/h'

  m_axion_eV: 
    value: 1.e-27
    drop: True

  m_axion:
    value: 'lambda m_axion_eV, h: m_axion_eV*1.56e29/3.336e-04/h'

  kJ0p5: 
    value: 'lambda m_axion_eV, h: np.sqrt(3.336e-04 * h * m_axion_eV * 1.56e29)/h * (0.6666)**0.25'


  logA:
    prior:
      min: 3.0
      max: 3.1
    latex: \log(10^{10} A_\mathrm{s})
    drop: True
  A_s:
    value: 'lambda logA: 1e-10*np.exp(logA)'
    latex: A_\mathrm{s}
  n_s:
    prior:
      min: 0.9
      max: 1.
    latex: n_\mathrm{s}
  h: 
    prior:
      min: 0.6
      max: 0.8
    latex: h
  omega_b:
    prior:
      min: 0.015
      max: 0.03
    latex: \Omega_\mathrm{b} h^2
  omega_cdm:
    prior:
      min: 0.1
      max: 0.14
    latex: \Omega_\mathrm{c} h^2
  tau_reio:
    prior:
      min: 0.03
      max: 0.07
    latex: \tau_\mathrm{reio}





theory:
  classy:
    extra_args:
      N_ncdm: 0.
      N_ur: 3.046
      # N_ncdm: 1
      # N_ur: 2.0328
      non linear: hmcode
      nonlinear_min_k_max: 20

      tol_shooting_deltax: 1e-4
      tol_shooting_deltaF: 1e-4
      scf_parameters : '0.05,0.0' ## note: if Omega_scf is set, the parameter entry corresponding to scf_tuning_index is ignored and used for shooting.
      scf_tuning_index: 0  # in this example, we shoot over theta_ini in order to adjust Omega_scf.
      scf_evolve_as_fluid: 'yes'  # if set to yes, will switch for fluid when threshold_scf_fluid_m_over_H is met
      scf_evolve_like_axionCAMB: 'yes'  # fluid all the time in perts, the option no is currently bugging, to be debugged
      threshold_scf_fluid_m_over_H: 3  # threshold_scf_fluid_m_over_H controls when to switch to fluid
      do_shooting: 'yes'  # controls shooting in general; e.g. theta_s
      do_shooting_scf: 'yes'  # necessary when log10_axion_ac & log10_fraction_axion_ac are chosen
      scf_has_perturbations: 'yes'  # for pedagogical purposes only
      use_big_theta_scf: 'no'  # in perts with the fluid it is often more stable to follow the heat flux rather "Big Theta=(1+w)*Theta" than the velocity divergence "Theta"
      use_delta_scf_over_1plusw: 'no'
      attractor_ic_scf: 'no'  # some specific IC for tracker potentials
      # evolver: 0

      scf_potential: axion
      n_axion: 1
      f_axion: 0.4  # in units of mpl

    stop_at_error: False
    ignore_obsolete: True
    renames:
      Mnu: m_ncdm

# debug: True
sampler:
  evaluate:
  # nautilus:
  #   poolN: 72
output: chains/test/chain
